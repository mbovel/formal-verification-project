(declare-datatypes () (
    (MyList
        (MyNil)
        (MyCons (x Int) (xs MyList))
    )
))


(define-fun-rec myMin ((t MyList)) Int
    (match t 
        (case MyNil 1000)
        (case (MyCons x xs)
            (let ((xsMin (myMin xs)))
            (ite (<= x xsMin) x xsMin))
        )
    )
)

(define-fun-rec myMax ((t MyList)) Int
    (match t 
        (case MyNil (- 1))
        (case (MyCons x xs)
            (let ((xsMax (myMax xs)))
            (ite (>= x xsMax) x xsMax))
        )
    )
)

(declare-fun aList () MyList)

(assert (>= (myMin aList) 0))
(assert (<= (myMin aList) 999))
(assert (not (= (myMin aList) (myMax aList))))


(check-sat)
;(get-model) ; Uncomment to use with Z3


;(exit) ; Uncomment to use with Z3
